import requests
import random
import time
import uuid
import string
import hashlib
import base64
import json
import ms4
import re
import fake_useragent
import os
from concurrent.futures import ThreadPoolExecutor
import threading
import telebot

lock = threading.Lock()
BOT_TOKEN = input(' Token Bot:') 
bot = telebot.TeleBot(BOT_TOKEN)
sessions = {}
user_agent_generator = fake_useragent.FakeUserAgent()
thread_local = threading.local()

def random_num(length=10):
    return ''.join(random.choice(string.digits) for _ in range(length))

def random_hex(length=32):
    return ''.join(random.choice('0123456789abcdef') for _ in range(length))

def random_uuid():
    return str(uuid.uuid4())

def random_user_agent():
    brands = ["Infinix", "Samsung", "Xiaomi", "Huawei", "Realme", "Oppo", "Vivo", "Tecno"]
    models = ["X692", "A52", "M21", "Note9", "Y20", "C25", "F17", "P30"]
    android_versions = ["10", "11", "12", "13"]
    build_versions = ["QP1A.190711.020", "RP1A.200720.011", "TP1A.220905.001", "SP1A.210812.016"]
    brand = random.choice(brands)
    model = random.choice(models)
    android_ver = random.choice(android_versions)
    build_ver = random.choice(build_versions)
    return f"com.zhiliaoapp.musically.go/370402 (Linux; U; Android {android_ver}; ar; {brand} {model}; Build/{build_ver}; tt-ok/3.12.13.27-ul)"

def generate_x_gorgon(ts):
    base = hashlib.md5(str(ts).encode()).hexdigest()
    return "8404" + base[:30]

def generate_x_argus(ts, device_id, iid):
    raw = f"{device_id}:{iid}:{ts}"
    hashed = hashlib.sha256(raw.encode()).digest()
    return base64.b64encode(hashed).decode()

def generate_xtt_params(params_dict):
    encoded = json.dumps(params_dict, separators=(',', ':')).encode()
    return base64.b64encode(encoded).decode()

def get_session():
    if not hasattr(thread_local, "session"):
        thread_local.session = requests.Session()
    return thread_local.session
def process_user(drk, user_id, msg_chat_id, msg_id_to_edit):
    try:
        ms = ms4.InfoTik.TikTok_Info(drk)
        user_id_ = ms["id"]
        url_profile = f'https://www.tiktok.com/@{drk}'
        headers_profile = {'User-Agent': user_agent_generator.random}
        session = get_session()
        rsp = session.get(url_profile, headers=headers_profile).text
        sec_user_ = re.search(r'"secUid":"([^"]+)"', rsp).group(1)

        iid = random_num(19)
        device_id = random_num(19)
        cdid = random_uuid()
        openudid = random_hex(16)
        seen = set()
        all_users = []
        page_token = ""
        max_time = ""
        total_count = 0
        

        while True:
            ts = int(time.time())
            user_agent = random_user_agent()
            headers = {
                'User-Agent': user_agent,
                'Accept-Encoding': "gzip",
                'rpc-persist-pyxis-policy-v-tnc': "1",
                'x-ss-dp': "1340",
                'x-tt-req-timeout': "90000",
                'sdk-version': "2",
                'x-tt-token': random_hex(96),
                'passport-sdk-version': "30990",
                'x-tt-ultra-lite': "1",
                'x-vc-bdturing-sdk-version': "2.3.2.i18n",
                'x-tt-store-region': "iq",
                'x-tt-store-region-src': "uid",
                'x-ladon': random_hex(64),
                'x-khronos': str(ts),
                'x-argus': generate_x_argus(ts, device_id, iid),
                'x-gorgon': generate_x_gorgon(ts),
                'X-Tt-Params': generate_xtt_params({
                    "iid": iid,
                    "device_id": device_id,
                    "cdid": cdid,
                    "ts": ts,
                    "version": "37.4.2",
                    "region": "IQ"
                }),
                'Cookie': f"install_id={iid}; device_id={device_id}; odin_tt={random_hex(64)}; sessionid={random_hex(32)}"
            }

            url = f"https://api16-normal-c-alisg.tiktokv.com/lite/v2/relation/following/list/?" \
                  f"sss-network-channel={random_num(13)}&user_id={user_id_}&count=200&page_token={page_token}&max_time={max_time}&source_type=4" \
                  f"&request_tag_from=h5&sec_user_id={sec_user_}" \
                  f"&manifest_version_code=370402&_rticket={random_num(13)}&app_language=ar&app_type=normal" \
                  f"&iid={iid}&app_package=com.zhiliaoapp.musically.go&channel=googleplay&device_type=Infinix+X692" \
                  f"&language=ar&host_abi=arm64-v8a&locale=ar&resolution=720*1464&openudid={openudid}&update_version_code=370402" \
                  f"&ac2=wifi&cdid={cdid}&sys_region=EG&os_api=29&timezone_name=Asia%2FBaghdad&dpi=320" \
                  f"&carrier_region=IQ&ac=wifi&device_id={device_id}&os_version=10&timezone_offset=10800&version_code=370402" \
                  f"&app_name=musically_go&ab_version=37.4.2&version_name=37.4.2&device_brand=Infinix&op_region=IQ&ssmix=a" \
                  f"&device_platform=android&build_number=37.4.2&region=EG&aid=1340&ts={ts}"

            try:
                response = session.get(url, headers=headers).json()

                # ✅ تحقق أول مرة فقط من عدد المتابعين الحقيقي
                

                users = [item['unique_id'] for item in response.get('followings', [])]

                for u in users:
                    if u not in seen:
                        seen.add(u)
                        all_users.append(u)
                        total_count += 1
                        if total_count % 500 == 0:
                            try:
                                bot.edit_message_text(chat_id=msg_chat_id, message_id=msg_id_to_edit,
                                                      text=f"🔄 يتم الآن فحص {drk}\nعدد المتابعين المسحوبين: {total_count}")
                            except:
                                pass

                if not response.get("has_more"):
                    break

                page_token = response.get("next_page_token", "")
                max_time = response.get("min_time", "")

            except Exception:
                break

        with lock:
            with open(f"followings_{user_id}.txt", "a", encoding="utf-8") as f:
                for u in all_users:
                    f.write(u + "\n")

    except Exception:
        pass

@bot.message_handler(commands=['start'])
def send_welcome(message):
    sessions[message.chat.id] = {'stage': 'collect_users'}
    bot.reply_to(message, "👋 أرسل اليوزرات كل واحد بسطر.")

@bot.message_handler(func=lambda m: m.chat.id in sessions)
def handle_msg(message):
    session = sessions[message.chat.id]

    if session['stage'] == 'collect_users':
        usernames = list(set([u.strip() for u in message.text.strip().split("\n") if u.strip()]))
        if not usernames:
            bot.send_message(message.chat.id, "❌ أرسل يوزر واحد على الأقل.")
            return

        session['usernames'] = usernames
        status_msg = bot.send_message(message.chat.id, f"جاري السحب 🔄\nعدد الحسابات: {len(usernames)}")
        user_id = message.chat.id
        msg_id = status_msg.message_id
        chat_id = status_msg.chat.id

        def run_scrape():
            output_file = f"followings_{user_id}.txt"
            if os.path.exists(output_file):
                os.remove(output_file)

            with ThreadPoolExecutor(max_workers=100) as executor:
                executor.map(lambda u: process_user(u, user_id, chat_id, msg_id), usernames)

            try:
                bot.edit_message_text(chat_id=chat_id, message_id=msg_id,
                                      text="✅ تم السحب بنجاح! جاري إرسال الملف...")
            except:
                pass

            if os.path.exists(output_file):
                with open(output_file, "rb") as f:
                    bot.send_document(chat_id, f)
                os.remove(output_file)
            else:
                bot.send_message(chat_id, "❌ لم يتم العثور على الملف.")

        threading.Thread(target=run_scrape).start()
        session['stage'] = 'done'

print("✅ Bot is running...")
bot.infinity_polling()
